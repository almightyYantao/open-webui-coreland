stages:
  - build

variables:
  IMAGE_NAME: "registry.qunhequnhe.com/itsystem/open-webui"
  REGISTRY: "registry.qunhequnhe.com"
  PLATFORMS: "linux/amd64,linux/arm64"
  DOCKER_HOST: unix:///var/run/docker.sock
  DOCKER_TLS_CERTDIR: ""
  DOCKER_CLI_EXPERIMENTAL: enabled

.default-build-template: &default-build-template
  tags:
    - kube-runner
  image: docker.1ms.run/library/docker:24.0.2
  stage: build
  before_script:
    # 配置 Alpine 镜像源
    - echo "http://mirrors.aliyun.com/alpine/v3.18/main" > /etc/apk/repositories
    - echo "http://mirrors.aliyun.com/alpine/v3.18/community" >> /etc/apk/repositories
    - apk update
    - apk add --no-cache curl jq bash
    
    # 检查 Docker 连接
    - docker info
    
    # 设置 buildx - 使用你的镜像源
    - docker buildx version
    - |
      if ! docker buildx inspect mybuilder >/dev/null 2>&1; then
        docker buildx create \
          --use \
          --name mybuilder \
          --driver docker-container \
          --buildkitd-flags '--oci-worker-image docker.1ms.run/moby/buildkit:buildx-stable-1'
      else
        docker buildx use mybuilder
      fi
    - docker buildx inspect --bootstrap
    
    # 登录镜像仓库
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $REGISTRY
  after_script:
    - docker logout $REGISTRY || true

build-main-image:
  <<: *default-build-template
  script:
    - echo "Building main image for platforms ${PLATFORMS} ..."
    - VERSION=$(jq -r '.version' package.json)
    - echo "Building version:$VERSION"
    - echo "Image will be tagged as:"
    - echo "  - $IMAGE_NAME:latest"
    - echo "  - $IMAGE_NAME:$VERSION"
    - |
      docker buildx build \
        --platform ${PLATFORMS} \
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA" \
        --label "org.opencontainers.image.version=$VERSION" \
        --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
        --tag $IMAGE_NAME:latest \
        --tag $IMAGE_NAME:$VERSION \
        --push \
        --cache-from type=registry,ref=$IMAGE_NAME:cache \
        --cache-to type=registry,ref=$IMAGE_NAME:cache,mode=max \
        --progress=plain \
        .
    - echo "✅ Main image build completed successfully"
    - docker buildx imagetools inspect $IMAGE_NAME:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "dev"'
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/'
      when: on_success

build-cuda-image:
  <<: *default-build-template
  script:
    - echo "Building CUDA image for platforms ${PLATFORMS} ..."
    - VERSION=$(jq -r '.version' package.json)
    - echo "Building CUDA version:$VERSION"
    - echo "Image will be tagged as:"
    - echo "  - $IMAGE_NAME:cuda-latest"
    - echo "  - $IMAGE_NAME:cuda-$VERSION"
    - |
      docker buildx build \
        --platform ${PLATFORMS} \
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA" \
        --label "org.opencontainers.image.version=$VERSION" \
        --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
        --label "org.opencontainers.image.description=CUDA-enabled build" \
        --tag $IMAGE_NAME:cuda-latest \
        --tag $IMAGE_NAME:cuda-$VERSION \
        --push \
        --cache-from type=registry,ref=$IMAGE_NAME:cuda-cache \
        --cache-to type=registry,ref=$IMAGE_NAME:cuda-cache,mode=max \
        --build-arg USE_CUDA=true \
        --progress=plain \
        .
    - echo "✅ CUDA image build completed successfully"
    - docker buildx imagetools inspect $IMAGE_NAME:cuda-latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "dev"'
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/'
      when: on_success

# 可选：仅在发布标签时构建发布版本
build-release-image:
  <<: *default-build-template
  script:
    - echo "Building release image for tag ${CI_COMMIT_TAG} ..."
    - VERSION=${CI_COMMIT_TAG#v}  # 移除 v 前缀
    - echo "Release version:$VERSION"
    - echo "Image will be tagged as:"
    - echo "  - $IMAGE_NAME:$VERSION"
    - echo "  - $IMAGE_NAME:stable"
    - |
      docker buildx build \
        --platform ${PLATFORMS} \
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA" \
        --label "org.opencontainers.image.version=$VERSION" \
        --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
        --label "org.opencontainers.image.title=Open WebUI" \
        --tag $IMAGE_NAME:$VERSION \
        --tag $IMAGE_NAME:stable \
        --push \
        --cache-from type=registry,ref=$IMAGE_NAME:cache \
        --cache-to type=registry,ref=$IMAGE_NAME:cache,mode=max \
        --progress=plain \
        .
    - echo "✅ Release image build completed successfully"
    - docker buildx imagetools inspect $IMAGE_NAME:$VERSION
    - docker buildx imagetools inspect $IMAGE_NAME:stable
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
      when: on_success